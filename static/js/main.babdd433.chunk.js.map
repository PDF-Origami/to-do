{"version":3,"sources":["Task.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Task","this","handleRename","e","props","toggleRenameMode","name","input","target","parentElement","querySelector","focus","addEventListener","renameTask","value","key","elem","className","blur","children","removeTask","toggleTask","focusChanged","classList","contains","previousElementSibling","nextElementSibling","renameField","type","defaultValue","spellCheck","ref","tabIndex","role","completed","renaming","React","Component","AddTask","handleAddEvent","bind","tagName","addTask","onKeyDown","placeholder","onClick","title","ToDo","state","tasks","JSON","parse","localStorage","getItem","taskCounter","parseInt","error","length","newToDo","id","setState","copy","index","indexOf","find","task","splice","newName","setItem","stringify","completedTasks","push","Array","isArray","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.babdd433.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Task extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let Task = this;\r\n\r\n    function handleRename(e) { \r\n      if (Task.props.toggleRenameMode(Task.props.name)) { \r\n        const input = e.target.parentElement.parentElement.querySelector('input');\r\n\r\n        input.focus();\r\n        input.addEventListener('blur', (e) => {\r\n          Task.props.renameTask(Task.props.name, input.value);\r\n          Task.props.toggleRenameMode(Task.props.name);\r\n        })\r\n\r\n        input.addEventListener('keydown', (e) => {\r\n          if (e.key === 'Enter') {\r\n            Task.props.toggleRenameMode(Task.props.name);\r\n            Task.props.renameTask(Task.props.name, input.value);   \r\n          }\r\n        })\r\n      }\r\n    } // toggleRenameMode returns current 'renaming' state\r\n\r\n    this.elem.parentElement.addEventListener('keydown', (e) => {\r\n      if (\r\n        e.key === 'ArrowDown' &&\r\n        e.target.parentElement.className === \"Task-container\"\r\n      ) {\r\n        e.target.blur();\r\n        e.target.children[0].focus();\r\n      }\r\n    })\r\n\r\n    this.elem.addEventListener('click', function(e) {\r\n      if (e.target.className === 'fas fa-times') {\r\n        Task.props.removeTask(Task.props.name);\r\n\r\n      } else if (e.target.className === 'fas fa-pencil-alt') {\r\n        \r\n        handleRename(e); \r\n\r\n      } else {\r\n        if (e.target.className !== 'rename-input') {\r\n          Task.props.toggleTask(Task.props.name);\r\n        }\r\n      }\r\n      \r\n    })\r\n\r\n    this.elem.addEventListener('keydown', function(e) {\r\n      let focusChanged = false;\r\n  \r\n      function focus(elem) {\r\n        if (elem != null) {\r\n          elem.focus();\r\n          focusChanged = true;\r\n          return true\r\n        }\r\n      }\r\n      \r\n      if (e.target.classList.contains('Task')) {\r\n        switch (e.key) { // Move up or down the list, or select Task options\r\n          case 'ArrowUp':\r\n            focus(e.target.previousElementSibling);\r\n            break;\r\n  \r\n          case 'ArrowDown':\r\n            focus(e.target.nextElementSibling);\r\n            break;\r\n  \r\n          case 'ArrowRight':\r\n            focus(e.target.children[1].children[0]);\r\n            break;\r\n          \r\n          case 'Enter':\r\n            e.target.parentElement.focus();\r\n            Task.props.toggleTask(Task.props.name);\r\n            break;\r\n\r\n          default:\r\n        }\r\n      } else { // Equiv. to \"if event target is icon\"\r\n        switch (e.key) {\r\n          case 'ArrowRight':\r\n            focus(e.target.nextElementSibling);\r\n            break;\r\n  \r\n          case 'ArrowLeft':\r\n            if (!focus(e.target.previousElementSibling)) {       \r\n              focus(e.target.parentElement.parentElement);\r\n            }\r\n            break;\r\n\r\n          case 'Enter':\r\n            if (e.target.className === 'fas fa-times') {\r\n              e.target.parentElement.parentElement.parentElement.focus();\r\n              Task.props.removeTask(Task.props.name);\r\n            } else if (e.target.className === 'fas fa-pencil-alt') {\r\n              handleRename(e);\r\n            }\r\n            break;\r\n\r\n          default:\r\n        }\r\n      }\r\n  \r\n      if (focusChanged) {\r\n        e.target.blur();\r\n      }\r\n  \r\n    })\r\n  }\r\n\r\n  render() {\r\n    let renameField = (\r\n      <input type=\"text\" defaultValue={this.props.name} spellCheck=\"false\" className=\"rename-input\"></input>\r\n    )\r\n\r\n    return (\r\n      <div \r\n        ref={elem => this.elem = elem}\r\n        tabIndex=\"-1\"\r\n        role=\"button\"\r\n        className={this.props.completed ? \"Task completed\" : \"Task\"}\r\n      >\r\n        <span className=\"Task-left-span\">\r\n          <i className={this.props.completed ? \"far fa-check-square\" : \"far fa-square\"}></i>\r\n          {(this.props.renaming) ? renameField : <span>{this.props.name}</span>}    \r\n          \r\n        </span>\r\n        <span className=\"Task-right-span\">\r\n          <i className=\"fas fa-arrows-alt-v\" tabIndex=\"-1\"></i>\r\n          <i className=\"fas fa-pencil-alt\"tabIndex=\"-1\"></i>\r\n          <i className=\"fas fa-times\" tabIndex=\"-1\"></i>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}","import React from 'react';\r\n\r\nexport default class AddTask extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAddEvent = this.handleAddEvent.bind(this);\r\n  }\r\n\r\n  handleAddEvent(e) {\r\n    \r\n    switch (e.target.tagName) {\r\n      case 'BUTTON':\r\n        this.props.addTask(e.target.previousElementSibling.value);\r\n        e.target.previousElementSibling.value = '';\r\n        break;\r\n\r\n      case 'INPUT':\r\n        if (e.key === 'Enter') {\r\n          this.props.addTask(e.target.value);\r\n          e.target.value = '';\r\n        }\r\n        break;\r\n\r\n      default:\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-task-cont\">\r\n        <input onKeyDown={this.handleAddEvent} placeholder=\"Add task\" type=\"text\" className=\"add-task-input\"></input>\r\n        <button onClick={this.handleAddEvent} title=\"Add task (click or enter)\" className=\"add-task-button\">\r\n          <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport Task from './Task';\nimport AddTask from './AddTask'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <ToDo></ToDo>\n      </div>\n    </div>\n  );\n}\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTask = this.addTask.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n    this.toggleTask = this.toggleTask.bind(this);\n    this.renameTask = this.renameTask.bind(this);\n    this.toggleRenameMode = this.toggleRenameMode.bind(this);\n\n    this.state = {\n      tasks: JSON.parse(localStorage.getItem('tasks')), \n      taskCounter: (localStorage.getItem('taskCounter')) ? parseInt(localStorage.getItem('taskCounter')) : 0, \n      error: null\n    }\n  }\n\n  addTask(name) {\n    if (name.length > 0) {\n      let newToDo = {\n        name: name,\n        completed: false,\n        id: this.state.taskCounter,\n        renaming: false,\n      };\n\n      this.setState({taskCounter: this.state.taskCounter + 1});\n      this.setState({tasks: [...this.state.tasks, newToDo], error: null});\n    } else {\n      this.setState({error: 'Task name can\\'t be empty.'})\n    }\n  }\n\n  removeTask(name) {\n    let copy = [...this.state.tasks];\n    let index = copy.indexOf(copy.find(task => task.name === name));\n    if (index !== -1) {\n      copy.splice(index, 1);\n      this.setState({tasks: copy})\n    }\n  }\n\n  toggleTask(name) {\n    let copy = [...this.state.tasks];\n    let index = copy.indexOf(copy.find(task => task.name === name));\n    if (index !== -1) {\n      copy[index].completed = !copy[index].completed;\n      this.setState({tasks: copy});\n    }\n  }\n\n  toggleRenameMode(name) {\n    let copy = [...this.state.tasks];\n    let index = copy.indexOf(copy.find(task => task.name === name));\n    if (index !== -1) {\n      copy[index].renaming = !copy[index].renaming;\n      this.setState({tasks: copy});\n      return(copy[index].renaming);\n    }\n  }\n\n  renameTask(name, newName) {\n    let copy = [...this.state.tasks];\n    let index = copy.indexOf(copy.find(task => task.name === name));\n    if (index !== -1) {\n      copy[index].name = newName;\n      this.setState({tasks: copy});\n    }\n  }\n\n  render() { // Populate lists, wrap them with container if they're not empty\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n    localStorage.setItem('taskCounter', this.state.taskCounter);\n\n    let tasks = [];\n    let completedTasks = [];\n\n    for (let task of this.state.tasks) {\n      task = (\n        <Task \n          key={task.id} name={task.name}\n          removeTask={this.removeTask}\n          renameTask={this.renameTask}\n          toggleTask={this.toggleTask}\n          toggleRenameMode={this.toggleRenameMode}\n          completed={task.completed}\n          renaming={task.renaming}\n        ></Task>\n      )\n      if (!task.props.completed) {\n        tasks.push(task);\n      } else {\n        completedTasks.push(task);\n      }\n    };\n\n    if (tasks.length > 0) {\n      tasks = (\n        <div className=\"Task-list\" tabIndex=\"0\">\n          {tasks}\n        </div>\n      )\n    }\n    if (completedTasks.length > 0) {\n      completedTasks = (\n        <div className={ // Only render border if both lists are present\n            (!Array.isArray(tasks)) ? \"has-border completed-Task-list\" : \"completed-Task-list\"\n            } tabIndex=\"0\">\n          {completedTasks}\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"ToDo card\">\n        <main>\n          <div className=\"card-header\">\n            <span className=\"header-title\">To-do list</span>\n            <span className=\"header-warning\">{this.state.error}</span>\n          </div>\n          <AddTask addTask={this.addTask}></AddTask>\n          <div className=\"Task-container\">\n            {tasks}\n            {completedTasks}\n          </div>\n        </main>\n        <footer>Made by PDF_Origami</footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}